// Generated by CoffeeScript 1.12.3
(function() {
  var D, W;

  W = window;

  D = document;

  W.CnvBulb = (function() {
    function CnvBulb(canvas) {
      this.canvas = canvas;
      this.ctx = this.canvas.getContext('2d');
      this.patterns = {};
      this.P = {
        r: 190,
        background: 'i/crash-bg.jpg',
        cx: this.canvas.width / 2,
        cy: this.canvas.height / 2
      };
    }

    CnvBulb.prototype.init = function(p, drawingCallback) {
      this.drawingCallback = drawingCallback;
      this.addPattern(this.P.background);
      this.status = 'init';
      this.d = {
        s: 1,
        y1: 35,
        y2: -35,
        _y1: -35,
        _y2: 35,
        _y: 2,
        p: p,
        _p: 0,
        ps: 1
      };
      this.draw();
    };

    CnvBulb.prototype.addPattern = function(url) {
      var img;
      if (this.patterns[url] !== void 0) {
        return;
      }
      this.patterns[url] = false;
      img = new Image;
      img.onload = (function(_this) {
        return function() {
          _this.patterns[url] = _this.ctx.createPattern(img, "repeat");
          return _this.draw(false);
        };
      })(this);
      return img.src = url;
    };

    CnvBulb.prototype.setLevel = function(p) {
      this.d._p = p;
      this.d.ps = 0;
      this.d.ps = this.d._p > this.d.p ? 1 : 2;
      if (this.d.ps) {
        this.status = 'flow';
        return this.draw(true);
      }
    };

    CnvBulb.prototype.makeWave = function() {
      if (this.d.s === 1) {
        if (this.d.y1 >= this.d._y1) {
          this.d.y1 -= this.d._y;
        }
        if (this.d.y2 <= this.d._y2) {
          this.d.y2 += this.d._y;
        }
        if (this.d.y2 >= this.d._y2) {
          this.d.s = 2;
          this.d._y1 = 35;
          this.d._y2 = -35;
        }
      }
      if (this.d.s === 2) {
        if (this.d.y1 <= this.d._y1) {
          this.d.y1 += this.d._y;
        }
        if (this.d.y2 >= this.d._y2) {
          this.d.y2 -= this.d._y;
        }
        if (this.d.y2 <= this.d._y2) {
          this.d.s = 1;
          this.d._y1 = -35;
          return this.d._y2 = 35;
        }
      }
    };

    CnvBulb.prototype.drawBg = function() {
      if (this.patterns[this.P.background]) {
        this.ctx.arc(this.P.cx, this.P.cy, this.P.r, 0, 2 * Math.PI);
        this.ctx.fillStyle = this.patterns[this.P.background];
        return this.ctx.fill();
      }
    };

    CnvBulb.prototype.drawLevel = function() {
      var bx1, bx2, by1, by2, ea, gradient, r, sa, x1, x2, y1, y2;
      sa = 0.5 * Math.PI - Math.PI * (this.d.p / 100);
      ea = 0.5 * Math.PI + Math.PI * (this.d.p / 100);
      r = this.P.r + 10;
      x2 = this.P.cx + Math.cos(sa) * r;
      y2 = this.P.cy + Math.sin(sa) * r;
      x1 = this.P.cx + Math.cos(ea) * r;
      y1 = this.P.cy + Math.sin(ea) * r;
      bx1 = x1 + (this.P.cx - x1) / 2;
      by1 = y1 + this.d.y1;
      bx2 = x2 - (this.P.cx - x1) / 2 - 50;
      by2 = y1 + this.d.y2;
      this.ctx.beginPath();
      this.ctx.arc(this.P.cx, this.P.cy, r, sa, ea);
      this.ctx.bezierCurveTo(bx1, by1, bx2, by2, x2, y2);
      gradient = this.ctx.createLinearGradient(0, y1, 0, this.P.cy + r + 100);
      gradient.addColorStop(0, 'rgba(157, 22, 69, 0.8)');
      gradient.addColorStop(1, 'transparent');
      this.ctx.fillStyle = gradient;
      this.ctx.strokeStyle = "#d21550";
      this.ctx.lineWidth = 6;
      this.ctx.shadowBlur = 0;
      this.ctx.closePath();
      this.ctx.fill();
      return this.ctx.stroke();
    };

    CnvBulb.prototype.draw = function(animate) {
      var callback;
      if (animate == null) {
        animate = true;
      }
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      if (this.d.ps) {
        if (this.d.ps === 1) {
          if (this.d.p <= this.d._p) {
            this.d.p += 0.3;
            this.makeWave();
          } else {
            this.d.ps === 0;
            this.status = 'stop';
          }
        }
        if (this.d.ps === 2) {
          if (this.d.p >= this.d._p) {
            this.d.p -= 0.3;
            this.makeWave();
          } else {
            this.d.ps === 0;
            this.status = 'stop';
          }
        }
      }
      if (typeof this.drawingCallback === "function") {
        this.drawingCallback(this.d.p);
      }
      this.drawLevel();
      if ((this.status === 'flow') && animate) {
        callback = ((function(_this) {
          return function() {
            return _this.draw();
          };
        })(this));
        return requestAnimationFrame(callback);
      }
    };

    return CnvBulb;

  })();

}).call(this);

//# sourceMappingURL=bulb.js.map
