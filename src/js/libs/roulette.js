// Generated by CoffeeScript 1.12.3
(function() {
  var D, W,
    hasProp = {}.hasOwnProperty;

  W = window;

  D = document;

  W.CnvRoulette = (function() {
    function CnvRoulette(canvas) {
      this.canvas = canvas;
      this.ctx = this.canvas.getContext('2d');
      this.objects = [];
      this.patterns = {};
      this.P = {
        background: 'images/roulette-bg.png',
        centerX: this.canvas.width / 2,
        centerY: this.canvas.height / 2,
        picture: {
          width: 54,
          height: 54
        },
        chip: {
          width: 90,
          height: 82,
          amount: 15
        },
        outlineRadius: 32,
        speed: 20,
        slowdown_step: 3,
        minSpeed: 4
      };
    }

    CnvRoulette.prototype.init = function(arrRawObject) {
      var j, k, l, m, n, rObj, ref, ref1;
      l = arrRawObject.length;
      if (this.P.chip.amount > l) {
        for (n = m = ref = l, ref1 = this.P.chip.amount; ref <= ref1 ? m < ref1 : m > ref1; n = ref <= ref1 ? ++m : --m) {
          j = n % l;
          arrRawObject.push(JSON.parse(JSON.stringify(arrRawObject[j])));
        }
      }
      for (k in arrRawObject) {
        if (!hasProp.call(arrRawObject, k)) continue;
        rObj = arrRawObject[k];
        this.objects[k] = this.createPlayerObj(rObj, k);
      }
      this._l = this.objects.length;
      this._d = 0;
      this._a = 0;
      this.winner_id = null;
      this.addPattern(this.P.background);
      this.status = 'init';
    };

    CnvRoulette.prototype.start = function() {
      if (this.status === 'init' || this.status === 'stop') {
        this.winner_id = null;
        this._a = 0;
        this.P.speed = 20;
        this.status = 'spin';
        return this.draw();
      }
    };

    CnvRoulette.prototype.stop = function(id, afterStop) {
      var i, j, m, ref;
      this.afterStop = afterStop;
      this.status = 'slowdown';
      j = Math.floor(this.P.speed / this.P.slowdown_step);
      for (i = m = 0, ref = this.objects.length; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
        if (this.objects[i].id === id) {
          if (this.winner_id === null) {
            this.winner_id = i;
          }
        }
      }
      return this.slowDownTimer = setInterval((function(_this) {
        return function() {
          if (j-- > 0) {
            _this.P.speed -= _this.P.slowdown_step;
            if (_this.P.speed < _this.P.minSpeed) {
              return _this.P.speed = _this.P.minSpeed;
            }
          }
        };
      })(this), 1000);
    };

    CnvRoulette.prototype.addPattern = function(url) {
      var img;
      if (this.patterns[url] !== void 0) {
        return;
      }
      this.patterns[url] = false;
      img = new Image;
      img.onload = (function(_this) {
        return function() {
          _this.patterns[url] = img;
          return _this.draw(false);
        };
      })(this);
      return img.src = url;
    };

    CnvRoulette.prototype.createPlayerObj = function(rawObj, i) {
      var sObj;
      this.addPattern(rawObj.picture);
      this.addPattern(rawObj.big_picture);
      this.addPattern(rawObj.gray_picture);
      return sObj = {
        id: rawObj.id,
        num: i,
        color: rawObj.color,
        picture: rawObj.picture,
        big_picture: rawObj.big_picture,
        gray_picture: rawObj.gray_picture,
        x: (i - 1) * this.P.chip.width
      };
    };

    CnvRoulette.prototype.toGray = function() {
      var brightness, data, i, imageData;
      imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
      data = imageData.data;
      i = 0;
      while (i < data.length) {
        brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
        data[i] = brightness;
        data[i + 1] = brightness;
        data[i + 2] = brightness;
        i += 4;
      }
      this.ctx.putImageData(imageData, 0, 0);
    };

    CnvRoulette.prototype.drawPlayer = function(l, cObj, gray) {
      var color;
      if (gray == null) {
        gray = 0;
      }
      color = gray ? "#cccccc" : cObj.color;
      this.ctx.beginPath();
      this.ctx.arc(l + this.P.chip.width / 2, this.P.centerY, this.P.outlineRadius, 0, 2 * Math.PI);
      this.ctx.strokeStyle = color;
      this.ctx.lineWidth = 2;
      this.ctx.shadowBlur = gray ? 8 : 0;
      this.ctx.shadowColor = color;
      this.ctx.stroke();
      this.ctx.shadowBlur = 0;
      if (gray) {
        if (this.patterns[cObj.gray_picture]) {
          return this.ctx.drawImage(this.patterns[cObj.gray_picture], l + (this.P.chip.width - this.P.picture.width) / 2, (this.canvas.height - this.P.picture.height) / 2, 54, 54);
        }
      } else {
        if (this.patterns[cObj.picture]) {
          return this.ctx.drawImage(this.patterns[cObj.picture], l + (this.P.chip.width - this.P.picture.width) / 2, (this.canvas.height - this.P.picture.height) / 2, 54, 54);
        }
      }
    };

    CnvRoulette.prototype.drawWinner = function() {
      this.ctx.beginPath();
      this.ctx.arc(this.P.centerX, this.P.centerY, 56, 0, 2 * Math.PI);
      this.ctx.strokeStyle = this.objects[this.winner_id].color;
      this.ctx.lineWidth = 3;
      this.ctx.shadowBlur = 3;
      this.ctx.shadowColor = this.objects[this.winner_id].color;
      this.ctx.stroke();
      this.ctx.shadowBlur = 0;
      if (this.patterns[this.objects[this.winner_id].big_picture]) {
        return this.ctx.drawImage(this.patterns[this.objects[this.winner_id].big_picture], this.P.centerX - 48, this.P.centerY - 48, 96, 96);
      }
    };

    CnvRoulette.prototype.drawPointer = function(alpha) {
      var mt;
      if (alpha == null) {
        alpha = 0.1;
      }
      mt = 5;
      if (alpha > 1) {
        alpha = 1;
      }
      this.ctx.fillStyle = "rgba(238, 23, 23, " + alpha + ")";
      this.ctx.beginPath();
      this.ctx.moveTo(this.P.centerX - 20, mt);
      this.ctx.lineTo(this.P.centerX + 20, mt);
      this.ctx.lineTo(this.P.centerX, 34 + mt);
      this.ctx.closePath();
      this.ctx.fill();
      this.ctx.beginPath();
      this.ctx.moveTo(this.P.centerX - 20, this.canvas.height - mt);
      this.ctx.lineTo(this.P.centerX + 20, this.canvas.height - mt);
      this.ctx.lineTo(this.P.centerX, this.canvas.height - 34 - mt);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    CnvRoulette.prototype.drawBg = function() {
      if (this.patterns[this.P.background]) {
        this.ctx.shadowBlur = 0;
        return this.ctx.drawImage(this.patterns[this.P.background], -170, 14, 1425, 93);
      }
    };

    CnvRoulette.prototype.draw = function(animate) {
      var callback, i, m, o, p, ref, ref1, ref2;
      if (animate == null) {
        animate = true;
      }
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.drawBg();
      if (this.status === 'init' || this.status === 'stop') {
        this.toGray();
      }
      if (this.status === 'spin' || this.status === 'slowdown') {
        this._d += this.P.speed;
        if (this._d >= this.P.chip.width) {
          this._d = 0;
          this.objects[this.objects.length - 1].x = this.objects[0].x;
          for (i = m = 0, ref = this.objects.length - 1; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
            this.objects[i].x = this.objects[i + 1].x;
          }
        }
      }
      if (this.status === 'slowdown') {
        if (this.P.speed <= this.P.minSpeed && this.objects[this.winner_id].x + 1.5 * this.P.chip.width + this._d >= this.P.centerX && this.objects[this.winner_id].x + this.P.chip.width / 2 + this._d <= this.P.centerX) {
          this.P.speed = 1;
          clearInterval(this.slowDownTimer);
        }
        if (this.P.speed === 1 && this.objects[this.winner_id].x + this.P.chip.width / 2 + this._d >= this.P.centerX) {
          this.status = 'stop';
          if (typeof this.afterStop === "function") {
            this.afterStop();
          }
        }
      }
      for (i = o = 0, ref1 = this.objects.length; 0 <= ref1 ? o < ref1 : o > ref1; i = 0 <= ref1 ? ++o : --o) {
        this.drawPlayer(this.objects[i].x + this._d, this.objects[i], 1);
      }
      if (this.status === 'spin' || this.status === 'slowdown') {
        this.ctx.clearRect(this.P.centerX - this.P.chip.width / 2, 0, this.P.chip.width, this.canvas.height);
        this.ctx.globalCompositeOperation = 'destination-over';
        this.drawBg();
        for (i = p = 0, ref2 = this.objects.length; 0 <= ref2 ? p < ref2 : p > ref2; i = 0 <= ref2 ? ++p : --p) {
          this.drawPlayer(this.objects[i].x + this._d, this.objects[i], 0);
        }
        this.ctx.globalCompositeOperation = 'source-over';
      }
      if (this.status === 'slowdown' || this.status === 'stop') {
        this.drawPointer(this._a += 0.05);
      }
      if (this.status === 'stop') {
        this.toGray();
        this.drawPointer(this._a += 0.05);
        this.drawWinner();
      }
      if ((this.status === 'slowdown' || this.status === 'spin' || this.status === 'winner_showing') && animate) {
        callback = ((function(_this) {
          return function() {
            return _this.draw();
          };
        })(this));
        return requestAnimationFrame(callback);
      }
    };

    return CnvRoulette;

  })();

}).call(this);

//# sourceMappingURL=roulette.js.map
