// Generated by CoffeeScript 1.12.3
(function() {
  var $, D, W;

  $ = jQuery;

  W = window;

  D = document;

  W.cvScrollBox = (function() {
    function cvScrollBox(scrollBoxSelector, color1) {
      this.color = color1 != null ? color1 : "#ffffff";
      this.jScrBox = $(scrollBoxSelector);
      this.jScrBoxWrap = $(".rscroll-box-wrap", this.jScrBox);
      this.jItems = $(".rscroll-box-item", this.jScrBox);
      this.jItemsWraps = $(".rscroll-box-item-wrap", this.jScrBox);
      $(".scrl-canvas", this.jScrBox).attr('id', scrollBoxSelector + "_canvas");
      this.canvas = D.getElementById(scrollBoxSelector + "_canvas");
      this.ctx = this.canvas.getContext('2d');
      this.o1 = {
        x: 380.1021,
        y: 205.6397,
        r: 367.1046,
        sa: -0.1956,
        ea: 0.5945
      };
      this.scrollerHeight = 0;
      this.step = 25;
      this.max_xt = 70;
      this.jtemParams = [];
    }

    cvScrollBox.instance = function(scrollBoxSelector, color) {
      var inst;
      if (color == null) {
        color = "#ffffff";
      }
      inst = new this(scrollBoxSelector, color);
      inst.init();
      return inst;
    };

    cvScrollBox.prototype.init = function() {
      this.jScrBoxWrap.scrollTop(0);
      this.jItems.each((function(_this) {
        return function(i) {
          return _this.initItemParams(_this.jItems.eq(i), i);
        };
      })(this));
      this.update();
      this.scrollerHeight = this.jScrBox.height() / ((this.jScrBoxWrap.height() + this.jScrBoxWrap.get(0).scrollHeight) / 100);
      this.jScrBoxWrap.on("scroll", (function(_this) {
        return function() {
          var pK, sT;
          sT = _this.jScrBoxWrap.scrollTop();
          pK = 100 - sT / ((_this.jScrBoxWrap.get(0).scrollHeight - _this.jScrBoxWrap.height()) / 100);
          _this.draw(_this.scrollerHeight, pK);
          _this.update();
        };
      })(this));
      return this.jScrBoxWrap.trigger('scroll');
    };

    cvScrollBox.prototype.initItemParams = function(jItem, i) {
      return this.jtemParams[i] = jItem.position().top + (jItem.outerHeight() / 2);
    };

    cvScrollBox.prototype.update = function() {
      var _t, i, j, len, ref, results, y;
      ref = this.jtemParams;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        y = ref[i];
        _t = (function() {
          switch (false) {
            case !(y < this.jScrBoxWrap.scrollTop()):
              return this.max_xt;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step):
              return this.max_xt - 15;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 2):
              return this.max_xt - 15 * 1.2;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 3):
              return this.max_xt - 15 * 2;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 4):
              return this.max_xt - 15 * 2.7;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 5):
              return this.max_xt - 15 * 3.4;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 6):
              return this.max_xt - 15 * 3.6;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 7):
              return this.max_xt - 15 * 4;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 8):
              return this.max_xt - 15 * 4.5;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 9):
              return this.max_xt - 15 * 4.8;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 10):
              return this.max_xt - 15 * 4.3;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 11):
              return this.max_xt - 15 * 3.9;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 12):
              return this.max_xt - 15 * 3.2;
            case !(y < this.jScrBoxWrap.scrollTop() + this.step * 13):
              return this.max_xt - 15 * 2.8;
            case !(y < this.jScrBox.height()):
              return this.max_xt;
            default:
              return this.max_xt;
          }
        }).call(this);
        results.push(this.jItemsWraps.eq(i).css('transform', "translateX(" + _t + "px)"));
      }
      return results;
    };

    cvScrollBox.prototype.drawSectorBar = function() {
      this.ctx.beginPath();
      this.ctx.arc(this.o1.x, this.o1.y, this.o1.r, Math.PI + this.o1.sa, Math.PI + this.o1.ea);
      this.ctx.arc(this.o1.x + 7, this.o1.y, this.o1.r, Math.PI + this.o1.ea, Math.PI + this.o1.sa, 1);
      this.ctx.strokeStyle = "#18140a";
      this.ctx.fillStyle = "#18140a";
      this.ctx.lineWidth = 1;
      this.ctx.shadowColor = "#18140a";
      this.ctx.shadowBlur = 1;
      this.ctx.closePath();
      return this.ctx.fill();
    };

    cvScrollBox.prototype.drawSectorScroller = function(pW, pT) {
      var ea1, k1, p1, sa1, w1;
      if (pW == null) {
        pW = 30;
      }
      if (pT == null) {
        pT = 10;
      }
      this.ctx.lineWidth = 1;
      this.ctx.strokeStyle = this.color;
      p1 = Math.abs(this.o1.ea - this.o1.sa) / 100;
      w1 = pW * p1;
      k1 = (this.o1.ea - w1 - this.o1.sa) / 100;
      sa1 = this.o1.sa + k1 * pT;
      ea1 = sa1 + w1;
      this.ctx.beginPath();
      this.ctx.arc(this.o1.x, this.o1.y, this.o1.r, Math.PI + sa1, Math.PI + ea1);
      this.ctx.arc(this.o1.x + 7, this.o1.y, this.o1.r, Math.PI + ea1, Math.PI + sa1, 1);
      this.ctx.fillStyle = this.color;
      this.ctx.shadowColor = this.color;
      this.ctx.shadowBlur = 10;
      this.ctx.closePath();
      this.ctx.fill();
      return this.ctx.stroke();
    };

    cvScrollBox.prototype.draw = function(pW, pT) {
      if (pW == null) {
        pW = 10;
      }
      if (pT == null) {
        pT = 0;
      }
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.drawSectorBar();
      this.drawSectorScroller(pW, pT);
    };

    return cvScrollBox;

  })();

}).call(this);

//# sourceMappingURL=jquery.cvScrollBox.js.map
