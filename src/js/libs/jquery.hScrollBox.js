// Generated by CoffeeScript 1.12.3
(function() {
  var $, D, W;

  $ = jQuery;

  W = window;

  D = document;

  W.hScrollBox = (function() {
    function hScrollBox(scrollBoxSelector, step1, shrinkLastItems1) {
      this.step = step1 != null ? step1 : 0.5;
      this.shrinkLastItems = shrinkLastItems1 != null ? shrinkLastItems1 : false;
      this.jHSBs = $("" + scrollBoxSelector);
      this.jWrap = $('.h-scroll-box-wrap', this.jHSBs);
      this.jItems = $('.h-scroll-box-item', this.jWrap);
      this.jBar = $('.h-scroll-box-bar', this.jHSBs);
      this.jScroller = $('div', this.jBar);
      this.wrapWidth = this.scrollerWidth = 0;
      this.jtemParams = [];
    }

    hScrollBox.instance = function(scrollBoxSelector, step, shrinkLastItems) {
      var inst;
      if (step == null) {
        step = 0.5;
      }
      if (shrinkLastItems == null) {
        shrinkLastItems = false;
      }
      inst = new this(scrollBoxSelector, step, shrinkLastItems);
      inst.init();
      return inst;
    };

    hScrollBox.prototype.init = function() {
      this.jItems.each((function(_this) {
        return function(i) {
          _this.wrapWidth += _this.jItems.eq(i).outerWidth(true);
          if (_this.shrinkLastItems) {
            return _this.initItemParams(_this.jItems.eq(i), i);
          }
        };
      })(this));
      this.jWrap.width(this.wrapWidth);
      this.update();
      $(W).resize((function(_this) {
        return function() {
          return _this.update(_this.jWrap.position().left, _this.jScroller.position().left);
        };
      })(this));
      this.jHSBs.on('DOMMouseScroll mousewheel', (function(_this) {
        return function(e) {
          var sx, wx;
          if (e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0) {
            wx = _this.jWrap.position().left + _this.jHSBs.width() * _this.step;
            sx = _this.jScroller.position().left - _this.scrollerWidth * _this.step;
            if (!_this.endScrollLeft && _this.scrollerWidth > 0) {
              e.preventDefault();
            }
          } else {
            wx = _this.jWrap.position().left - _this.jHSBs.width() * _this.step;
            sx = _this.jScroller.position().left + _this.scrollerWidth * _this.step;
            if (!_this.endScrollRight && _this.scrollerWidth > 0) {
              e.preventDefault();
            }
          }
          console.log('scroll' + _this.endScrollLeft);
          _this.update(wx, sx);
        };
      })(this));
    };

    hScrollBox.prototype.initItemParams = function(jItem, i) {
      return this.jtemParams[i] = {
        left: jItem.position().left,
        width: jItem.outerWidth(true)
      };
    };

    hScrollBox.prototype.updateItems = function(wx) {
      var i, item, j, last_id, len, ref, results;
      last_id = 10000;
      ref = this.jtemParams;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (i > last_id) {
          results.push(this.jItems.eq(i).addClass('is-last-item'));
        } else if (item.left >= this.jHSBs.width() - wx - item.width - 10) {
          last_id = i;
          results.push(this.jItems.eq(i).addClass('is-last-item'));
        } else {
          results.push(this.jItems.eq(i).removeClass('is-last-item'));
        }
      }
      return results;
    };

    hScrollBox.prototype.update = function(wx, sx) {
      if (wx == null) {
        wx = 0;
      }
      if (sx == null) {
        sx = 0;
      }
      if (this.jHSBs.outerWidth() - this.wrapWidth >= 0) {
        wx = sx = 0;
        this.jWrap.width('auto');
        this.jScroller.width(0);
      } else {
        this.jWrap.width(this.wrapWidth);
        this.scrollerWidth = this.jBar.width() * this.jHSBs.width() / this.wrapWidth;
        this.jScroller.width(this.scrollerWidth);
        wx = (function() {
          switch (false) {
            case !(wx > 0):
              return 0;
            case !(wx < this.jHSBs.width() - this.wrapWidth):
              return this.jHSBs.width() - this.wrapWidth;
            default:
              return wx;
          }
        }).call(this);
        sx = (function() {
          switch (false) {
            case !(sx < 0):
              return 0;
            case !(sx > this.jBar.width() - this.scrollerWidth):
              return this.jBar.width() - this.scrollerWidth;
            default:
              return sx;
          }
        }).call(this);
      }
      this.endScrollLeft = sx === 0 ? 1 : 0;
      this.endScrollRight = sx === this.jBar.width() - this.scrollerWidth ? 1 : 0;
      console.log('update' + this.endScrollLeft);
      this.jWrap.css('transform', "translateX(" + wx + "px)");
      this.jScroller.css('transform', "translateX(" + sx + "px)");
      if (this.shrinkLastItems) {
        return this.updateItems(wx);
      }
    };

    return hScrollBox;

  })();

}).call(this);

//# sourceMappingURL=jquery.hScrollBox.js.map
